package com.rosa.swift.core.network.services.sap;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 7/29/2013 12:01:18 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.AsyncTask;

import com.rosa.swift.core.business.utils.KSoapHelper;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import java.io.IOException;
import java.util.List;

@SuppressWarnings("unused")
public class ZService {

    public String NAMESPACE = "urn:sap-com:document:sap:soap:functions:mc-style";
    public String url = "";
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    public WS_Enums.SoapProtocolVersion soapVersion;

    public ZService() {
    }

    public ZService(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }

    public ZService(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url;
    }

    public ZService(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void ZServiceAsync(ZServiceRequest zServiceRequest) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ZServiceAsync(zServiceRequest, null);
    }

    public void ZServiceAsync(final ZServiceRequest zServiceRequest, final List<HeaderProperty> headers) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        new AsyncTask<Void, Void, ZServiceResponse>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected ZServiceResponse doInBackground(Void... params) {
                try {
                    return ZconsService(zServiceRequest, headers);
                } catch (Exception ex) {
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
                    return null;
                }
            }

            @Override
            protected void onPostExecute(ZServiceResponse result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ZService", result);
                }
            }
        }.execute();
    }

    public ZServiceResponse ZconsService(ZServiceRequest zServiceRequest) throws Exception {
        return ZconsService(zServiceRequest, null);
    }

    private HttpTransportSE httpTransport;

    public ZServiceResponse ZconsService(ZServiceRequest zServiceRequest1, List<HeaderProperty> headers) throws Exception {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);

        soapEnvelope.implicitTypes = true;      // Подразумеваемые типы. Не добавлять атрубут с типом в элемент.
        soapEnvelope.dotNet = true;             // Не добавлять левые отлибуты в элемент
        soapEnvelope.setAddAdornments(false);   // Не добавлять хрен-знает что в элемент

        SoapObject soapReq = new SoapObject("urn:sap-com:document:sap:soap:functions:mc-style", "ZdriverService");
        soapEnvelope.addMapping("urn:sap-com:document:sap:soap:functions:mc-style", "ZdriverService1", ZServiceRequest.class);

        KSoapHelper.serializable2Request(soapReq, zServiceRequest1);

        soapEnvelope.setOutputSoapObject(soapReq);
        httpTransport = new HttpTransportSE(url, timeOut);

        System.setProperty("http.keepAlive", "false");

        httpTransport.debug = false;
        try {
            if (headers != null) {
                httpTransport.call("urn:sap-com:document:sap:soap:functions:mc-style/ZdriverService", soapEnvelope, headers);
            } else {
                httpTransport.call("urn:sap-com:document:sap:soap:functions:mc-style/ZdriverService", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                throw new Exception(fault.faultstring);
            } else {
                SoapObject result = (SoapObject) retObj;
                return new ZServiceResponse(result);
            }
        } catch (IOException e) {//SocketException
            if (e.getMessage().contains("HTTP status: 500")) {
                if (httpTransport.responseDump.contains("VersionMissmatch")) //TODO Need ksoap2android 3.0.1
                {
                    throw new Exception("SOAP Fault: VersionMissmatch");
                } else {
                    throw e;
                }
            } else {
                throw e;
            }
        }
    }

    public void cancelRequest() {
        if (httpTransport != null) {
            try {
                httpTransport.reset();
            } catch (Exception ignored) {
            }
        }
    }
}
