package com.rosa.swift.core.network.services.sap;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 7/29/2013 12:01:18 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class ZServiceRequest implements KvmSerializable {

    public String ivCompress;
    public String ivFunctionName;
    public String ivParams;
    public String ivVersion;

    public ZServiceRequest() {
    }

    @SuppressWarnings("unused")
    public ZServiceRequest(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("IvCompress")) {
            Object obj = soapObject.getProperty("IvCompress");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ivCompress = j.toString();
            } else if (obj != null && obj instanceof String) {
                ivCompress = (String) obj;
            }
        }
        if (soapObject.hasProperty("IvFunctionName")) {
            Object obj = soapObject.getProperty("IvFunctionName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ivFunctionName = j.toString();
            } else if (obj != null && obj instanceof String) {
                ivFunctionName = (String) obj;
            }
        }
        if (soapObject.hasProperty("IvParams")) {
            Object obj = soapObject.getProperty("IvParams");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ivParams = j.toString();
            } else if (obj != null && obj instanceof String) {
                ivParams = (String) obj;
            }
        }
        if (soapObject.hasProperty("IvVersion")) {
            Object obj = soapObject.getProperty("IvVersion");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ivVersion = j.toString();
            } else if (obj != null && obj instanceof String) {
                ivVersion = (String) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return ivCompress;
            case 1:
                return ivFunctionName;
            case 2:
                return ivParams;
            case 3:
                return ivVersion;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 4;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "IvCompress";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "IvFunctionName";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "IvParams";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "IvVersion";
        }
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
